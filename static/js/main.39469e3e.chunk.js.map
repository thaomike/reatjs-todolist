{"version":3,"sources":["Component/Another/Header.js","Component/Another/Todo.js","Component/Another/TodoList.js","Component/Another/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","memo","props","useState","text","setText","addTodo","className","placeholder","value","onChange","e","target","onKeyPress","key","id","Date","valueOf","isCompleted","onAddTodo","Todo","todo","getTodoEditingId","todoEditingId","editTodo","index","markCompleted","removeTodo","isEditing","type","checked","onDoubleClick","onClick","TodoList","todosList","isCheckedAll","checkAllTodos","readOnly","htmlFor","map","Footer","status","setStatusFilter","clearCompleted","filterBtns","title","isActive","link","numOfTodosLeft","btn","FilterBtn","numOfTodos","href","isNotCheckedAll","todos","find","filterByStatus","filter","App","state","sort","setState","preState","list","splice","updatedList","onRemove","this","length","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.39469e3e.chunk.js","sourcesContent":["import React, { memo, useState } from 'react'\r\n\r\nconst Header = memo(props => {\r\n    const [text, setText] = useState('')\r\n    const {addTodo} = props\r\n    const onAddTodo = (e => {\r\n        if (e.key === 'Enter' && text)\r\n        {\r\n            // console.log('text',text)\r\n            addTodo({\r\n                id: new Date().valueOf(),\r\n                text ,\r\n                isCompleted: false,\r\n            })\r\n            setText('')\r\n        }\r\n    })\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>todos</h1>\r\n            <input \r\n                className=\"new-todo\"\r\n                placeholder=\"...\"\r\n                value = {text}\r\n                onChange = {(e) => setText(e.target.value)}\r\n                onKeyPress = {(e) => {onAddTodo(e)}}\r\n            />\r\n        </header>\r\n    )\r\n})\r\n\r\nexport default Header","import React, {memo, useState} from 'react'\r\n\r\nconst Todo = memo(props => {\r\n    const { todo, \r\n            getTodoEditingId, \r\n            todoEditingId, \r\n            editTodo, \r\n            index,\r\n            markCompleted,\r\n            removeTodo } = props\r\n    const isEditing = todoEditingId === todo.id\r\n    const [text, setText] = useState(todo.text)\r\n\r\n    const onEditTodo = () => {\r\n        editTodo({\r\n            ...todo, \r\n            text\r\n        }, index)\r\n    }\r\n\r\n    const onRemoveTodo = (id) => {\r\n        removeTodo(id)\r\n    }\r\n    return (\r\n        <li className={`${isEditing ? 'editing' : ''} ${todo.isCompleted ? 'completed' : ''}`}>\r\n            { !isEditing ?\r\n                <div className=\"view\">\r\n                    <input \r\n                        className=\"toggle\" \r\n                        type=\"checkbox\" \r\n                        checked={todo.isCompleted}\r\n                        onChange = {() => markCompleted(todo.id)}    \r\n                    />\r\n                    <label onDoubleClick={() => getTodoEditingId(todo.id)}>{todo.text}</label>\r\n                    <button \r\n                        className=\"destroy\"\r\n                        onClick = {() => onRemoveTodo(todo.id)}\r\n                    ></button>\r\n                </div> :\r\n                <input \r\n                    className=\"edit\" \r\n                    type=\"text\"\r\n                    value = {text} \r\n                    onChange = {e => setText(e.target.value)}\r\n                    onKeyPress = {(e)=>{\r\n                        if(e.key === 'Enter')\r\n                        {\r\n                            onEditTodo()\r\n                        }\r\n                    }}\r\n                />\r\n            }\r\n        </li>\r\n    )\r\n})\r\n\r\nexport default Todo","import React, {memo} from 'react'\r\nimport Todo from './Todo'\r\n\r\nconst TodoList = memo(props => {\r\n    const { todosList, isCheckedAll, checkAllTodos } = props\r\n    return(\r\n        <section className=\"main\">\r\n            <input readOnly\r\n                className=\"toggle-all\"\r\n                type = 'checkbox'\r\n                checked = {isCheckedAll}\r\n            />\r\n            <label \r\n                htmlFor=\"toggle-all\"\r\n                onClick = {checkAllTodos}\r\n            ></label>\r\n            <ul className=\"todo-list\">\r\n                {\r\n                    todosList.map((todo, index) => (\r\n                        <Todo \r\n                            key = {`todo${todo.id}`} \r\n                            {...{todo}}\r\n                            {...props}\r\n                            index = {index}\r\n                        />\r\n                    ))\r\n                }\r\n            </ul>\r\n        </section>\r\n    )\r\n})\r\n\r\nexport default TodoList","import React, {memo} from 'react'\r\n\r\nconst Footer = memo(props => {\r\n    const { status, setStatusFilter, clearCompleted } = props\r\n    const filterBtns = [\r\n        {\r\n        title: 'All',\r\n        isActive: status === 'ALL',\r\n        onClick: () => setStatusFilter('ALL'),\r\n        link: ''\r\n        },\r\n        {\r\n        title: 'Active',\r\n        isActive: status === 'ACTIVE',\r\n        onClick: () => setStatusFilter('ACTIVE'),\r\n        link: 'active'\r\n        },\r\n        {\r\n        title: 'Completed',\r\n        isActive: status === 'COMPLETED',\r\n        onClick: () => setStatusFilter('COMPLETED'),\r\n        link: 'complete'\r\n        },\r\n\r\n    ]\r\n    return(\r\n        <footer className=\"footer\">\r\n            <span className=\"todo-count\">\r\n                <strong>{props.numOfTodosLeft}</strong>\r\n                <span> </span>\r\n                <span>{props.numOfTodosLeft <= 1 ? 'item ': 'items '}</span>\r\n                <span>left</span>\r\n            </span>\r\n\r\n            <ul className=\"filters\">\r\n                {\r\n                    filterBtns.map(btn => (\r\n                        <FilterBtn \r\n                            key = {`btn${btn.title}`}\r\n                            {...btn}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n            </ul>\r\n\r\n            { props.numOfTodos > props.numOfTodosLeft \r\n                && <button \r\n                    className=\"clear-completed\" \r\n                    onClick={clearCompleted}\r\n                >\r\n                    Clear completed\r\n                </button>\r\n            }\r\n        </footer>\r\n    )\r\n})\r\n\r\nconst FilterBtn = memo(props => {\r\n    const { title, onClick, link, isActive} = props\r\n    return(\r\n        <>\r\n            <li>\r\n                <a\r\n                    href={`#/${link}`}\r\n                    className={isActive ? 'selected' : ''}\r\n                    onClick={onClick}\r\n                >\r\n                    {title}\r\n                </a>\r\n            </li>\r\n            <span></span>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Footer","import React from 'react';\nimport Header from './Component/Another/Header';\nimport TodoList from './Component/Another/TodoList';\nimport Footer from './Component/Another/Footer'\nimport './Styles/TaskList.css'\n\nconst isNotCheckedAll = (todos = []) => todos.find(todo => !todo.isCompleted)\n\nconst filterByStatus = (todos = [], status = '', id = '') => {\n    switch(status)\n    {\n        case 'ACTIVE':\n            return todos.filter(todo => !todo.isCompleted)\n        case 'COMPLETED':\n            return todos.filter(todo => todo.isCompleted)\n        case 'REMOVE':\n            return todos.filter(todo => todo.id !== id)\n        default:\n            return todos\n    }\n} \n\n// const sortByText = (todos = []) => {\n//     return todos.sort((a,b) => {\n//         if(a.text < b.text) return -1;\n//         if(a.text === b.text) return 0;\n//         return 1;\n//     })\n// }\nclass App extends React.PureComponent {\n    state = {\n        todosList: [\n        {\n            id: 1,\n            text:'todo 1',\n            isCompleted: true,\n        },\n        {\n            id: 2,\n            text:'todo 2',\n            isCompleted: false,\n        }],\n        todoEditingId: '',\n        isCheckedAll: false,\n        status: 'ALL',\n        sort: false\n    }\n\n    componentWillMount() {\n        this.setState({\n            isCheckedAll : !isNotCheckedAll(this.state.todosList)\n        })\n    }\n\n    addTodo = (todo = {}) => {\n        // console.log('todo',todo);\n        this.setState(preState => (\n            {todosList: [...preState.todosList, todo]}\n        )) \n    }\n\n    getTodoEditingId = (id = '') => {\n        this.setState({todoEditingId : id})\n    }\n\n    editTodo = (todo = {}, index = -1) => {\n        if(index >= 0)\n        {\n            const { todosList : list} = this.state\n            list.splice(index, 1, todo)\n            this.setState({ \n                            todosList : list,\n                            todoEditingId: ''\n                        })\n        }\n    }\n\n    markCompleted = (id = '') => {\n        const {todosList} = this.state\n        const updatedList = todosList.map(todo => todo.id === id ? ({ ...todo, isCompleted : !todo.isCompleted}) : todo)\n        this.setState(preState => ({\n            todosList: updatedList,\n            isCheckedAll: !isNotCheckedAll(updatedList)\n\n        }))\n    }\n\n    checkAllTodos = () => {\n        const { todosList } = this.state\n        this.setState(preState => ({\n            todosList: todosList.map(todo => ({...todo, isCompleted: !preState.isCheckedAll})),\n            isCheckedAll: !preState.isCheckedAll\n        }))\n    }\n\n    setStatusFilter = (status = '') => {\n        this.setState({\n            status\n        })\n    }\n\n    clearCompleted = () => {\n        const { todosList } = this.state\n        this.setState({\n            todosList: filterByStatus(todosList, 'ACTIVE')\n        })\n    }\n\n    onRemove = (id = '') => {\n        const { todosList } = this.state\n        this.setState({\n            todosList: filterByStatus(todosList, 'REMOVE', id)\n        })\n    }\n\n    render() {\n        const { \n                todosList, \n                todoEditingId, \n                isCheckedAll, \n                status } = this.state\n        return (\n            <div className=\"todoapp\">\n                <Header\n                    addTodo = {this.addTodo}\n                />\n                <TodoList \n                    todosList = {filterByStatus(todosList, status)}\n                    getTodoEditingId = {this.getTodoEditingId}\n                    todoEditingId = {todoEditingId}\n                    editTodo = {this.editTodo}\n                    markCompleted = {this.markCompleted}\n                    isCheckedAll = {isCheckedAll}\n                    checkAllTodos = {this.checkAllTodos}\n                    removeTodo = {this.onRemove}\n                />\n                <Footer\n                    setStatusFilter = {this.setStatusFilter}\n                    status = {status}\n                    clearCompleted = {this.clearCompleted}\n                    numOfTodos = {todosList.length}\n                    numOfTodosLeft = {filterByStatus(todosList,\"ACTIVE\").length}\n                />\n    \n                {/* <TaskList/> */}\n            </div>\n        );\n    }\n    \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}